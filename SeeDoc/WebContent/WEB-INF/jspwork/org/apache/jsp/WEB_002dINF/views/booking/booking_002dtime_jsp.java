/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.56
 * Generated at: 2020-07-20 05:02:28 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.booking;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.Date;
import booking.model.vo.Booking;
import hospital.model.vo.Hospital;
import hospital.model.vo.HospTime;
import hospital.model.vo.HospFile;
import hospital.model.vo.HospDoctor;
import java.util.List;

public final class booking_002dtime_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("hospital.model.vo.HospFile");
    _jspx_imports_classes.add("hospital.model.vo.HospTime");
    _jspx_imports_classes.add("hospital.model.vo.Hospital");
    _jspx_imports_classes.add("hospital.model.vo.HospDoctor");
    _jspx_imports_classes.add("booking.model.vo.Booking");
    _jspx_imports_classes.add("java.sql.Date");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	List<Booking> blist = (List<Booking>)request.getAttribute("list");
	HospTime ht = (HospTime)request.getAttribute("ht");
	int week = (int)request.getAttribute("week");
	int year = Integer.parseInt((String)request.getAttribute("year"));
	int mon = Integer.parseInt((String)request.getAttribute("mon"));
	int day = Integer.parseInt((String)request.getAttribute("day"));
//	System.out.println("jsp: "+blist);
//	System.out.println("jsp: "+ht);
//	System.out.println("jsp: "+week);
//	System.out.println("jsp: "+year);
//	System.out.println("jsp: "+mon);
//	System.out.println("jsp: "+day);
	
	int amHourOpen = 0;
	int amMinOpen = 0;
	int pmHourEnd = 0;
	int pmMinEnd = 0;
	String lunHourOpen_ = ht.getLunOpen()!=null ? ht.getLunOpen().substring(0, ht.getLunOpen().indexOf(":")) : "";
	int lunHourOpen = Integer.parseInt(lunHourOpen_);
	String lunMinOpen_ = ht.getLunOpen()!=null ?  ht.getLunOpen().substring(ht.getLunOpen().indexOf(":")+1) : "";
	int lunMinOpen = Integer.parseInt(lunMinOpen_);
	String lunHourEnd_ = ht.getLunEnd()!= null ? ht.getLunEnd().substring(0, ht.getLunEnd().indexOf(":")) : "";
	int lunHourEnd = Integer.parseInt(lunHourEnd_);
	String lunMinEnd_ = ht.getLunEnd()!= null ?  ht.getLunEnd().substring(ht.getLunEnd().indexOf(":")+1) : "";
	int lunMinEnd = Integer.parseInt(lunMinEnd_);
	
	
	if(ht.getSunOpen()!=null && ht.getSunEnd()!= null && week==0) {
		String amHourOpen_ = ht.getSunOpen().substring(0, ht.getSunOpen().indexOf(":"));
		amHourOpen = Integer.parseInt(amHourOpen_);
		String amMinOpen_ = ht.getSunOpen().substring(ht.getSunOpen().indexOf(":")+1);
		amMinOpen = Integer.parseInt(amMinOpen_);
		String pmHourEnd_ = ht.getSunEnd().substring(0, ht.getSunEnd().indexOf(":"));
		pmHourEnd = Integer.parseInt(pmHourEnd_);
		String pmMinEnd_ = ht.getSunEnd().substring(ht.getSunEnd().indexOf(":")+1);
		pmMinEnd = Integer.parseInt(pmMinEnd_);
	} else if(ht.getMonOpen() != null && ht.getMonEnd() != null && week==1) {
		String amHourOpen_ = ht.getMonOpen().substring(0, ht.getMonOpen().indexOf(":"));
		amHourOpen = Integer.parseInt(amHourOpen_);
		String amMinOpen_ = ht.getMonOpen().substring(ht.getMonOpen().indexOf(":")+1);
		amMinOpen = Integer.parseInt(amMinOpen_);
		String pmHourEnd_ = ht.getMonEnd().substring(0, ht.getMonEnd().indexOf(":"));
		pmHourEnd = Integer.parseInt(pmHourEnd_);
		String pmMinEnd_ = ht.getMonEnd().substring(ht.getMonEnd().indexOf(":")+1);
		pmMinEnd = Integer.parseInt(pmMinEnd_);
	} else if(ht.getTueOpen() != null && ht.getTueEnd() != null && week==2) {
		String amHourOpen_ = ht.getTueOpen().substring(0, ht.getTueOpen().indexOf(":"));
		amHourOpen = Integer.parseInt(amHourOpen_);
		String amMinOpen_ = ht.getTueOpen().substring(ht.getTueOpen().indexOf(":")+1);
		amMinOpen = Integer.parseInt(amMinOpen_);
		String pmHourEnd_ = ht.getTueEnd().substring(0, ht.getTueEnd().indexOf(":"));
		pmHourEnd = Integer.parseInt(pmHourEnd_);
		String pmMinEnd_ = ht.getTueEnd().substring(ht.getTueEnd().indexOf(":")+1);
		pmMinEnd = Integer.parseInt(pmMinEnd_);
	} else if(ht.getWedOpen() != null && ht.getWedEnd() != null && week==3) {
		String amHourOpen_ = ht.getWedOpen().substring(0, ht.getWedOpen().indexOf(":"));
		amHourOpen = Integer.parseInt(amHourOpen_);
		String amMinOpen_ = ht.getWedOpen().substring(ht.getWedOpen().indexOf(":")+1);
		amMinOpen = Integer.parseInt(amMinOpen_);
		String pmHourEnd_ = ht.getWedEnd().substring(0, ht.getWedEnd().indexOf(":"));
		pmHourEnd = Integer.parseInt(pmHourEnd_);
		String pmMinEnd_ = ht.getWedEnd().substring(ht.getWedEnd().indexOf(":")+1);
		pmMinEnd = Integer.parseInt(pmMinEnd_);
	} else if(ht.getThuOpen() != null && ht.getThuEnd() != null && week==4) {
		String amHourOpen_ = ht.getThuOpen().substring(0, ht.getThuOpen().indexOf(":"));
		amHourOpen = Integer.parseInt(amHourOpen_);
		String amMinOpen_ = ht.getThuOpen().substring(ht.getThuOpen().indexOf(":")+1);
		amMinOpen = Integer.parseInt(amMinOpen_);
		String pmHourEnd_ = ht.getThuEnd().substring(0, ht.getThuEnd().indexOf(":"));
		pmHourEnd = Integer.parseInt(pmHourEnd_);
		String pmMinEnd_ = ht.getThuEnd().substring(ht.getThuEnd().indexOf(":")+1);
		pmMinEnd = Integer.parseInt(pmMinEnd_);
	} else if(ht.getFriOpen() != null && ht.getFriEnd() != null && week==5) {
		String amHourOpen_ = ht.getFriOpen().substring(0, ht.getFriOpen().indexOf(":"));
		amHourOpen = Integer.parseInt(amHourOpen_);
		String amMinOpen_ = ht.getFriOpen().substring(ht.getFriOpen().indexOf(":")+1);
		amMinOpen = Integer.parseInt(amMinOpen_);
		String pmHourEnd_ = ht.getFriEnd().substring(0, ht.getFriEnd().indexOf(":"));
		pmHourEnd = Integer.parseInt(pmHourEnd_);
		String pmMinEnd_ = ht.getFriEnd().substring(ht.getFriEnd().indexOf(":")+1);
		pmMinEnd = Integer.parseInt(pmMinEnd_);
	} else if(ht.getSatOpen() != null && ht.getSatEnd() != null && week==6) {
		String amHourOpen_ = ht.getSatOpen().substring(0, ht.getSatOpen().indexOf(":"));
		amHourOpen = Integer.parseInt(amHourOpen_);
		String amMinOpen_ = ht.getSatOpen().substring(ht.getSatOpen().indexOf(":")+1);
		amMinOpen = Integer.parseInt(amMinOpen_);
		String pmHourEnd_ = ht.getSatEnd().substring(0, ht.getSatEnd().indexOf(":"));
		pmHourEnd = Integer.parseInt(pmHourEnd_);
		String pmMinEnd_ = ht.getSatEnd().substring(ht.getSatEnd().indexOf(":")+1);
		pmMinEnd = Integer.parseInt(pmMinEnd_);
	}
	int amOpen = (amHourOpen*60)+amMinOpen;
	int lunOpen = (lunHourOpen*60)+lunMinOpen;
	int lunEnd = (lunHourEnd*60)+lunMinEnd;
	int pmEnd = (pmHourEnd*60)+pmMinEnd;
	

		//System.out.println("amOpen: "+amHourOpen+":"+amMinOpen);
		//System.out.println("lunOpen: "+lunHourOpen+":"+lunMinOpen);
		//System.out.println("lunEnd: "+lunHourEnd+":"+lunMinEnd);
		//System.out.println("pmEnd: "+pmHourEnd+":"+pmMinEnd);
		//System.out.println("amOpen: "+amOpen);
		//System.out.println("lunOpen: "+lunOpen);
		//System.out.println("lunEnd: "+lunEnd);
		//System.out.println("pmEnd: "+pmEnd);

      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("<link rel=\"stylesheet\" href=\"../css/booking-hos.css\">\r\n");
      out.write("<script src=\"../js/datepicker.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<h2 style=\"text-align:center\">예약시간</h2>\r\n");
      out.write("\t");
 if(amHourOpen != 0 && pmHourEnd != 0) {
      out.write("\r\n");
      out.write("\t<p class=\"time-title\">오전</p>\r\n");
      out.write("\t<div class=\"time\">\r\n");
      out.write("\t");
 if(amOpen<lunOpen) { 
      out.write("\r\n");
      out.write("\t\t");
 for(int i=amOpen; i<lunOpen; i=i+30){ 
      out.write("\r\n");
      out.write("\t\t\t<input type=\"button\" value=\"");
      out.print( i/60 < 10 ? "0"+i/60:i/60 );
      out.write(':');
      out.print( i%60 < 10 ? "0"+i%60 : i%60);
      out.write("\">\r\n");
      out.write("\t\t");
 } 
      out.write('\r');
      out.write('\n');
      out.write('	');
 } else {
      out.write("\r\n");
      out.write("\t\t<h4 style=\"text-align: center\">오전 진료가 없습니다.</h4>\r\n");
      out.write("\t");
 } 
      out.write("\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<p class=\"time-title\">오후</p>\r\n");
      out.write("\t<div class=\"time\">\r\n");
      out.write("\t");
 if(lunEnd < pmEnd){ 
      out.write("\r\n");
      out.write("\t\t");
 for(int i=lunEnd; i<pmEnd; i=i+30){ 
      out.write("\r\n");
      out.write("\t\t\t<input type=\"button\" value=\"");
      out.print( i/60 < 10 ? "0"+i/60:i/60 );
      out.write(':');
      out.print( i%60 < 10 ? "0"+i%60 : i%60);
      out.write("\">\r\n");
      out.write("\t\t");
 } 
      out.write('\r');
      out.write('\n');
      out.write('	');
 } else {
      out.write("\r\n");
      out.write("\t\t<h4 style=\"text-align: center\">오후 진료가 없습니다.</h4>\r\n");
      out.write("\t");
 } 
      out.write("\r\n");
      out.write("\t</div>\r\n");
      out.write("\t");
 } else {
      out.write("\r\n");
      out.write("\t\t<h4 style=\"text-align: center; margin-top:150px;\">해당 병원의 휴무일입니다.</h4>\r\n");
      out.write("\t");
 } 
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("\t$(function() {\r\n");
      out.write("\t\t\tlet today = new Date();\r\n");
      out.write("\t\t\tlet time = today.getHours()+\":\"+today.getMinutes() \r\n");
      out.write("\t \t\tlet times = today.getHours()*60 + today.getMinutes() \r\n");
      out.write("\t \t\t//console.log(times);\r\n");
      out.write("\t\t\t\tlet iArr = $(\".time input:button\");\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t/* 예약된 예약시간 disabled */\r\n");
      out.write("\t\t\t");
 if(blist != null) {
 				for(Booking b : blist) { 
				Date cal = Date.valueOf(year+"-"+mon+"-"+day);
					if(cal.equals(b.getBookingDate())) {
      out.write("\r\n");
      out.write("\t\t\t\t\t\tfor(let i=0; i<iArr.length; i++) { \r\n");
      out.write("\t\t\t\t\t \t\tnew Date(iArr[i].value);\r\n");
      out.write("\t\t\t\t\t\t\tif(iArr[i].value==\"");
      out.print( b.getBookingTime() );
      out.write("\"){\r\n");
      out.write("\t\t\t\t\t\t\t\t$(iArr[i]).attr('disabled', true);\r\n");
      out.write("\t\t\t\t\t\t\t};\r\n");
      out.write("\t\t\t\t\t\t };\r\n");
      out.write("\t\t\t\t\t");
 } 
      out.write("\r\n");
      out.write("\t\t\t\t");
 } 
      out.write("\r\n");
      out.write("\t\t\t");
 } 
      out.write("\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t/* 금일 지난 예약시간 disabled */\r\n");
      out.write("\t\t\tfor(let i=0; i<iArr.length; i++) {\r\n");
      out.write("\t\t\t\tlet btnTime = (iArr[i].value.substr(0,2) * 60) + (iArr[i].value.substr(3,5)*1);\r\n");
      out.write("\t\t\t\tif (");
      out.print( day );
      out.write("==today.getDate() && btnTime < times){\r\n");
      out.write("\t\t\t\t\t$(iArr[i]).attr('disabled', true);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t};\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t/* 7/15 변경내용 */\r\n");
      out.write("\t\t\t$(\".time\").on('click','input:button',function() {\r\n");
      out.write("\t\t\t\tbookingTime = $(this).val();\r\n");
      out.write("\t\t\t\t$(\"[name=bookingTime]\").attr('value', $(this).val());\r\n");
      out.write("\t\t\t\t$(\".modal\").children().eq(3).html(\"예약 시간 : \"+$(this).val());\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t/* $(\".time\").find(\"input\").css({\r\n");
      out.write("\t\t\t\t\t\"background-color\" : \"white\",\r\n");
      out.write("\t\t\t\t\t\"color\" : \"black\"\r\n");
      out.write("\t\t\t\t}); */\r\n");
      out.write("\t\t\t\t$(\".time\").find(\"input[disabled!=disabled]\").css({\r\n");
      out.write("\t\t\t\t\t\"background-color\" : \"white\",\r\n");
      out.write("\t\t\t\t\t\"color\" : \"black\"\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t/* $(\".time\").find(\"input[disabled='disabled']\").css({\r\n");
      out.write("\t\t\t\t\t\"background-color\" : \"white\",\r\n");
      out.write("\t\t\t\t\t\"color\" : \"(rgba(16, 16, 16, 0.3), rgb(170, 170, 170)\"\r\n");
      out.write("\t\t\t\t}); */\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t$(this).css({\r\n");
      out.write("\t\t\t\t\t\"background-color\" : \"#4286f4\",\r\n");
      out.write("\t\t\t\t\t\"color\" : \"white\"\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\t//console.log(bookingTime);\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t});\r\n");
      out.write("\r\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
